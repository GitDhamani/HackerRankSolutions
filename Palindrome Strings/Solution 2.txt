#include <iostream>
#include <string>

/*
So the way this works is we iterate through only the first half of the string.
As we go looking through each letter, we're comparing it to the last element of the
string (back) and then popping it to get rid of it. Anytime they are not equal to each
other then it's not a palindrome. Since the pop reduces the size of the string at each
loop, we can't use sentence.size() as the loop check because it will continuously decrease and so I copied the size into a separate variable called size to keep it fixed.
The reason we only go through half the string is the size of the string gets smaller and
smaller and by the time the loop as gone through all the letters half way, the end has crept down towards the middle
*/

bool PalindromeTest(std::string sentence)
{
	int size = sentence.size();
	for (int i = 0; i<size/2; i++)
	{
	if (sentence[i] != sentence.back()) return false;
	sentence.pop_back();
	}
}

int main()
{
	std::cout<<std::boolalpha;
	std::cout<<PalindromeTest("racecar");  //true
	return 0;
}